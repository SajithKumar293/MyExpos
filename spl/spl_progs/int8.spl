
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 8;

alias userSP R1;
userSP = SP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11]*512 - 1;

multipush(R1);
R1 = 1;
call MOD_1;
multipop(R1);

alias ret R0;

if(ret == -1) then
  [[PTBR + 2*((userSP - 1)/512)] * 512 + (userSP-1)%512] = -1;
else
  alias newpid R2;
  newpid = ret;
  alias childPTBR R3;
  childPTBR = PAGE_TABLE_BASE + newpid*20;
  alias childProcess R4;
  childProcess = PROCESS_TABLE + newpid*16;

  if([PTBR + 4] == -1) then
    multipush(R1,R2,R3,R4);
    R1 = 1;
    call MOD_2;
    multipop(R1,R2,R3,R4);
    [PTBR + 4] = ret;
    [PTBR + 5] = "1110";
    multipush(R1,R2,R3,R4);
    R1 = 1;
    call MOD_2;
    multipop(R1,R2,R3,R4);
    [PTBR + 6] = ret;
    [PTBR + 7] = "1110";
  endif;

  multipush(R1,R2,R3,R4);
  R1 = 1;
  call MOD_2;
  multipop(R1,R2,R3,R4);
  [childPTBR + 16] = ret;
  [childPTBR + 17] = "0110";
  multipush(R1,R2,R3,R4);
  R1 = 1;
  call MOD_2;
  multipop(R1,R2,R3,R4);
  [childPTBR + 18] = ret;
  [childPTBR + 19] = "0110";

  multipush(R1,R2,R3,R4);
  R1 = 1;
  call MOD_2;
  multipop(R1,R2,R3,R4);
  [childProcess + 11] = ret;

  alias parentProcess R5;
  parentProcess = PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16;

  [childProcess + 3] = [parentProcess + 3];
  [childProcess + 6] = [parentProcess + 6];
  [childProcess + 10] = [parentProcess + 10];
  [childProcess + 7] = [parentProcess + 7];
  [childProcess + 13] = [parentProcess + 13];

  [childProcess + 9] = 0;
  [childProcess + 12] = 0;
  [childProcess + 0] = 0;

  [childProcess + 2] = [SYSTEM_STATUS_TABLE + 1];

  [childProcess + 4] = CREATED;

  alias parentResTable R6;
  alias childResTable R7;
  alias counter R8;
  parentResTable = ([parentProcess + 11] + 1) * 512 - 16;
  childResTable = ([childProcess + 11] + 1) * 512 - 16;

  counter = 0;
  while(counter < 16) do
    [childResTable + counter] = [parentResTable + counter];
    [childResTable + counter + 1] = [parentResTable + counter + 1];
    if([parentResTable + counter] == SEMAPHORE) then
        [SEMAPHORE_TABLE + 4 * [parentResTable + counter + 1] + 1] = [SEMAPHORE_TABLE + 4 * [parentResTable + counter + 1] + 1] + 1;
    endif;
    counter = counter + 2;
  endwhile;

  counter = 0;
  while(counter<10) do
    [DISK_MAP_TABLE + newpid*10 + counter] = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + counter];
    counter = counter + 1;
  endwhile;

  [childPTBR + 0] = [PTBR + 0];
  [childPTBR + 1] = [PTBR + 1];
  [childPTBR + 2] = [PTBR + 2];
  [childPTBR + 3] = [PTBR + 3];

  [childPTBR + 4] = [PTBR + 4];
  [childPTBR + 5] = [PTBR + 5];
  [childPTBR + 6] = [PTBR + 6];
  [childPTBR + 7] = [PTBR + 7];

  [MEMORY_FREE_LIST + [childPTBR + 0]] = [MEMORY_FREE_LIST + [childPTBR + 0]] + 1;
  [MEMORY_FREE_LIST + [childPTBR + 2]] = [MEMORY_FREE_LIST + [childPTBR + 2]] + 1;
  [MEMORY_FREE_LIST + [childPTBR + 4]] = [MEMORY_FREE_LIST + [childPTBR + 4]] + 1;
  [MEMORY_FREE_LIST + [childPTBR + 6]] = [MEMORY_FREE_LIST + [childPTBR + 6]] + 1;

  counter = 8;
  while(counter<15) do
    [childPTBR + counter]    = [PTBR + counter];
    [childPTBR + counter+1]  = [PTBR + counter+1];
    if([childPTBR + counter]!=-1) then
      [MEMORY_FREE_LIST + [childPTBR + counter]] = [MEMORY_FREE_LIST + [childPTBR + counter]] + 1;
    endif;
    counter = counter + 2;
  endwhile;

  counter = 0;
  while(counter<512) do
    [[childPTBR + 16] * 512 + counter] = [[PTBR + 16] * 512 + counter];
    [[childPTBR + 18] * 512 + counter] = [[PTBR + 18] * 512 + counter];
    counter = counter + 1;
  endwhile;

  [[childProcess + 11]*512] = BP;
  [[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = newpid;
  [[childPTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = 0;
endif;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];
ireturn;